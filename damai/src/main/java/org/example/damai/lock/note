 // 拼接锁名称，格式为：Spring 前缀 - 锁前缀 + 分隔符 + 锁业务名 + 自定义键

  // 拼接锁信息，格式为：Spring 前缀 - 分布式锁 ID 前缀 + 分隔符 + 锁业务名 + 分隔符 + 有效锁键拼接结果



  分布式锁使用场景

  1. 用户注册   @ServiceLock(lockType= LockType.Write,name = REGISTER_USER_LOCK,keys = {"#userRegisterDto.mobile"})
  2 .
  //更新用户的信息
      @Transactional(rollbackFor = Exception.class)
      public void update(UserUpdateDto userUpdateDto){
          User user = userMapper.selectById(userUpdateDto.getId());
          if (Objects.isNull(user)) {
              throw new DaMaiFrameException(BaseCode.USER_EMPTY);
          }
          User updateUser = new User();
          BeanUtil.copyProperties(userUpdateDto,updateUser);
          userMapper.updateById(updateUser);
      }
  3. 更新用户密码 邮箱 手机号
      @Transactional(rollbackFor = Exception.class)
      public void updatePassword(UserUpdatePasswordDto userUpdatePasswordDto){
          User user = userMapper.selectById(userUpdatePasswordDto.getId());
          if (Objects.isNull(user)) {
              throw new DaMaiFrameException(BaseCode.USER_EMPTY);
          }
          User updateUser = new User();
          BeanUtil.copyProperties(userUpdatePasswordDto,updateUser);
          userMapper.updateById(updateUser);
      }